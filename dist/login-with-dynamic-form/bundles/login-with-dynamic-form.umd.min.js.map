{"version":3,"sources":["../../../projects/login-with-dynamic-form/src/lib/login-with-dynamic-form.component.ts","../../../projects/login-with-dynamic-form/src/lib/login-with-dynamic-form.module.ts"],"names":["LoginWithDynamicFormComponent","this","buttonLabel","formSubmit","EventEmitter","errorMessages","required","invalid","prototype","ngOnInit","loginForm","buildFormGroup","group","validatorList","fieldList","forEach","field","validators","push","Validators","email","pattern","name","FormControl","value","FormGroup","isValid","fieldName","controls","valid","isTouched","touched","onSubmit","_this","updatedFormData","emit","Component","args","selector","template","Input","Output","NgModule","imports","BrowserModule","ReactiveFormsModule","declarations","exports"],"mappings":"wcAkKE,SAAAA,IARSC,KAAAC,YAAuB,SACtBD,KAAAE,WAAa,IAAIC,EAAAA,aAEpBH,KAAAI,cAAgB,CACrBC,SAAU,uBACVC,QAAS,+BAKXP,EAAAQ,UAAAC,SAAA,WACER,KAAKS,UAAYT,KAAKU,kBAGxBX,EAAAQ,UAAAG,eAAA,WACE,IAAMC,EAAQ,GACVC,EAAgB,GAcpB,OAbAZ,KAAKa,UAAUC,SAAQ,SAAAC,GACjBA,EAAMC,WAAWX,UACnBO,EAAcK,KAAKC,EAAAA,WAAWb,UAE5BU,EAAMC,WAAWG,OACnBP,EAAcK,KAAKC,EAAAA,WAAWC,OAE5BJ,EAAMC,WAAWI,SACnBR,EAAcK,KAAKC,EAAAA,WAAWE,QAAQL,EAAMC,WAAWI,UAEzDT,EAAMI,EAAMM,MAAQ,IAAIC,EAAAA,YAAYP,EAAMQ,OAAS,GAAIX,GACvDA,EAAgB,MAEX,IAAIY,EAAAA,UAAUb,IAGvBZ,EAAAQ,UAAAkB,QAAA,SAAQC,GACN,OAAO1B,KAAKS,UAAUkB,SAASD,GAAWE,OAG5C7B,EAAAQ,UAAAsB,UAAA,SAAUH,GACR,OAAO1B,KAAKS,UAAUkB,SAASD,GAAWI,SAG5C/B,EAAAQ,UAAAwB,SAAA,WAAA,IAAAC,EAAAhC,KACQiC,EAAkB,GACxBjC,KAAKa,UAAUC,SAAQ,SAAAC,GACrBkB,EAAgBlB,EAAMM,MAAQW,EAAKvB,UAAUkB,SAASZ,EAAMM,MAAME,SAEpEvB,KAAKE,WAAWgC,KAAKD,6BAtLxBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,8BACVC,SAAU,+zCAwCR,siFA6FDC,EAAAA,2BACAA,EAAAA,0BACAC,EAAAA,gBC5IH,iCARCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,QAAS,CACPC,EAAAA,cACAC,EAAAA,qBAEFC,aAAc,CAAC9C,GACf+C,QAAS,CAAC/C","sourcesContent":["import { Component, EventEmitter, Input, Output, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n// Interfaces\nexport interface IFormField {\n  name: string;\n  type: string;\n  validators: IFormValidation;\n  label: string;\n  value: string;\n}\n\nexport interface IFormValidation {\n  required?: boolean;\n  pattern?: RegExp | string;\n  email?: boolean;\n}\n\n@Component({\n  selector: \"lib-login-with-dynamic-form\",\n  template: `\n    <div class=\"form-container\">\n      <div class=\"card-title\">\n        <h1>Login</h1>\n      </div>\n      <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"loginForm\">\n        <div *ngFor=\"let field of fieldList\" class=\"field-container\">\n          <label [attr.for]=\"field.name\">{{ field.label }}</label>\n          <input\n            class=\"input-field\"\n            [ngClass]=\"{ error: isTouched(field.name) && !isValid(field.name) }\"\n            [formControlName]=\"field.name\"\n            [type]=\"field.type\"\n          />\n          <div\n            class=\"error-message\"\n            *ngIf=\"isTouched(field.name) && !isValid(field.name)\"\n          >\n            <div *ngIf=\"loginForm.controls[field.name].errors.required\">\n              {{ field.label }} {{ errorMessages.required }}\n            </div>\n            <div\n              *ngIf=\"\n                loginForm.controls[field.name].errors.email ||\n                loginForm.controls[field.name].errors.pattern\n              \"\n            >\n              {{ errorMessages.invalid }} {{ field.label }}.\n            </div>\n          </div>\n        </div>\n        <div class=\"btn-container\">\n          <button type=\"submit\" [disabled]=\"!loginForm.valid\">\n            {{ buttonLabel }}\n          </button>\n        </div>\n      </form>\n    </div>\n  `,\n  styles: [\n    `\n      .form-container {\n        background: linear-gradient(\n          to right bottom,\n          rgba(255, 255, 255, 0.8),\n          rgba(255, 255, 255, 0.3)\n        );\n        border-radius: 0.5rem;\n        z-index: 2;\n        backdrop-filter: blur(2rem);\n        display: flex;\n        justify-content: space-between;\n        padding: 2rem;\n        width: 30rem;\n        box-shadow: 6px 6px 20px rgba(122, 122, 122, 0.212);\n      }\n      .form-container .card-title {\n        width: 30%;\n      }\n      .form-container form {\n        width: 70%;\n        padding: 0rem 0 2.3rem 1rem;\n      }\n      .form-container form label {\n        font-size: 1.2rem;\n        margin-bottom: 0.2rem;\n      }\n      .form-container form .field-container {\n        width: 100%;\n        margin-bottom: 1rem;\n      }\n      .form-container form .field-container .input-field {\n        display: block;\n        width: 97%;\n        border-radius: 0.5rem;\n        height: 3rem;\n        margin: 0.3rem 0;\n        font-size: 1.1rem;\n        padding-left: 0.5rem;\n        border: 1px solid #d7d7d7;\n        outline: none;\n      }\n      .form-container form .field-container .error {\n        border: 1px solid #f00;\n      }\n      .form-container form .field-container .error-message {\n        color: #f00;\n      }\n      .form-container form .btn-container {\n        display: flex;\n        justify-content: flex-end;\n        height: 2rem;\n      }\n      .form-container form .btn-container button {\n        color: #fff;\n        text-align: center;\n        border: none;\n        border-radius: 0.5rem;\n        min-width: 10rem;\n        height: 3rem;\n        font-size: 1.2rem;\n        margin-top: 1rem;\n      }\n      .form-container form .btn-container button {\n        background: linear-gradient(to right top, #000000e8, #00000061);\n        outline: none;\n        cursor: pointer;\n      }\n      .form-container form .btn-container button[disabled] {\n        background: #b4b4b4;\n        cursor: not-allowed;\n      }\n      @media screen and (max-width: \"625px\"), (max-width: \"425px\") {\n        .form-container {\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          width: 15rem;\n        }\n        .form-container h1 {\n          margin: 0 0 2rem 0;\n        }\n        .form-container form {\n          width: 100%;\n        }\n        .form-container button {\n          width: 100%;\n        }\n      }\n    `\n  ]\n})\nexport class LoginWithDynamicFormComponent {\n  @Input() fieldList: Array<IFormField>;\n  @Input() buttonLabel?: string = \"Submit\";\n  @Output() formSubmit = new EventEmitter<any>();\n  public loginForm: FormGroup;\n  public errorMessages = {\n    required: \"is a required field.\",\n    invalid: \"Please provide valid\"\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n    this.loginForm = this.buildFormGroup();\n  }\n\n  buildFormGroup() {\n    const group = {};\n    let validatorList = [];\n    this.fieldList.forEach(field => {\n      if (field.validators.required) {\n        validatorList.push(Validators.required);\n      }\n      if (field.validators.email) {\n        validatorList.push(Validators.email);\n      }\n      if (field.validators.pattern) {\n        validatorList.push(Validators.pattern(field.validators.pattern));\n      }\n      group[field.name] = new FormControl(field.value || \"\", validatorList);\n      validatorList = [];\n    });\n    return new FormGroup(group);\n  }\n\n  isValid(fieldName) {\n    return this.loginForm.controls[fieldName].valid;\n  }\n\n  isTouched(fieldName) {\n    return this.loginForm.controls[fieldName].touched;\n  }\n\n  onSubmit() {\n    const updatedFormData = {};\n    this.fieldList.forEach(field => {\n      updatedFormData[field.name] = this.loginForm.controls[field.name].value;\n    });\n    this.formSubmit.emit(updatedFormData);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { LoginWithDynamicFormComponent } from './login-with-dynamic-form.component';\n\n\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule\n  ],\n  declarations: [LoginWithDynamicFormComponent],\n  exports: [LoginWithDynamicFormComponent]\n})\nexport class LoginWithDynamicFormModule { }\n"]}