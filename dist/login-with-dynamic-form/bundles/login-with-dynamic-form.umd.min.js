!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("@angular/forms"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("login-with-dynamic-form",["exports","@angular/core","@angular/forms","@angular/platform-browser"],r):r((n=n||self)["login-with-dynamic-form"]={},n.ng.core,n.ng.forms,n.ng.platformBrowser)}(this,(function(n,r,e,o){"use strict";var i=function(){function n(){this.buttonLabel="Submit",this.formSubmit=new r.EventEmitter,this.errorMessages={required:"is a required field.",invalid:"Please provide valid"}}return n.prototype.ngOnInit=function(){this.loginForm=this.buildFormGroup()},n.prototype.buildFormGroup=function(){var n={},r=[];return this.fieldList.forEach((function(o){o.validators.required&&r.push(e.Validators.required),o.validators.email&&r.push(e.Validators.email),o.validators.pattern&&r.push(e.Validators.pattern(o.validators.pattern)),n[o.name]=new e.FormControl(o.value||"",r),r=[]})),new e.FormGroup(n)},n.prototype.isValid=function(n){return this.loginForm.controls[n].valid},n.prototype.isTouched=function(n){return this.loginForm.controls[n].touched},n.prototype.onSubmit=function(){var n=this,r={};this.fieldList.forEach((function(e){r[e.name]=n.loginForm.controls[e.name].value})),this.formSubmit.emit(r)},n}();i.decorators=[{type:r.Component,args:[{selector:"lib-login-with-dynamic-form",template:'\n    <div class="form-container">\n      <div class="card-title">\n        <h1>Login</h1>\n      </div>\n      <form (ngSubmit)="onSubmit()" [formGroup]="loginForm">\n        <div *ngFor="let field of fieldList" class="field-container">\n          <label [attr.for]="field.name">{{ field.label }}</label>\n          <input\n            class="input-field"\n            [ngClass]="{ error: isTouched(field.name) && !isValid(field.name) }"\n            [formControlName]="field.name"\n            [type]="field.type"\n          />\n          <div\n            class="error-message"\n            *ngIf="isTouched(field.name) && !isValid(field.name)"\n          >\n            <div *ngIf="loginForm.controls[field.name].errors.required">\n              {{ field.label }} {{ errorMessages.required }}\n            </div>\n            <div\n              *ngIf="\n                loginForm.controls[field.name].errors.email ||\n                loginForm.controls[field.name].errors.pattern\n              "\n            >\n              {{ errorMessages.invalid }} {{ field.label }}.\n            </div>\n          </div>\n        </div>\n        <div class="btn-container">\n          <button type="submit" [disabled]="!loginForm.valid">\n            {{ buttonLabel }}\n          </button>\n        </div>\n      </form>\n    </div>\n  ',styles:['\n      .form-container {\n        background: linear-gradient(\n          to right bottom,\n          rgba(255, 255, 255, 0.8),\n          rgba(255, 255, 255, 0.3)\n        );\n        border-radius: 0.5rem;\n        z-index: 2;\n        backdrop-filter: blur(2rem);\n        display: flex;\n        justify-content: space-between;\n        padding: 2rem;\n        width: 30rem;\n        box-shadow: 6px 6px 20px rgba(122, 122, 122, 0.212);\n      }\n      .form-container .card-title {\n        width: 30%;\n      }\n      .form-container form {\n        width: 70%;\n        padding: 0rem 0 2.3rem 1rem;\n      }\n      .form-container form label {\n        font-size: 1.2rem;\n        margin-bottom: 0.2rem;\n      }\n      .form-container form .field-container {\n        width: 100%;\n        margin-bottom: 1rem;\n      }\n      .form-container form .field-container .input-field {\n        display: block;\n        width: 97%;\n        border-radius: 0.5rem;\n        height: 3rem;\n        margin: 0.3rem 0;\n        font-size: 1.1rem;\n        padding-left: 0.5rem;\n        border: 1px solid #d7d7d7;\n        outline: none;\n      }\n      .form-container form .field-container .error {\n        border: 1px solid #f00;\n      }\n      .form-container form .field-container .error-message {\n        color: #f00;\n      }\n      .form-container form .btn-container {\n        display: flex;\n        justify-content: flex-end;\n        height: 2rem;\n      }\n      .form-container form .btn-container button {\n        color: #fff;\n        text-align: center;\n        border: none;\n        border-radius: 0.5rem;\n        min-width: 10rem;\n        height: 3rem;\n        font-size: 1.2rem;\n        margin-top: 1rem;\n      }\n      .form-container form .btn-container button {\n        background: linear-gradient(to right top, #000000e8, #00000061);\n        outline: none;\n        cursor: pointer;\n      }\n      .form-container form .btn-container button[disabled] {\n        background: #b4b4b4;\n        cursor: not-allowed;\n      }\n      @media screen and (max-width: "625px"), (max-width: "425px") {\n        .form-container {\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          width: 15rem;\n        }\n        .form-container h1 {\n          margin: 0 0 2rem 0;\n        }\n        .form-container form {\n          width: 100%;\n        }\n        .form-container button {\n          width: 100%;\n        }\n      }\n    ']}]}],i.ctorParameters=function(){return[]},i.propDecorators={fieldList:[{type:r.Input}],buttonLabel:[{type:r.Input}],formSubmit:[{type:r.Output}]};var t=function(){};t.decorators=[{type:r.NgModule,args:[{imports:[o.BrowserModule,e.ReactiveFormsModule],declarations:[i],exports:[i]}]}],n.LoginWithDynamicFormComponent=i,n.LoginWithDynamicFormModule=t,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=login-with-dynamic-form.umd.min.js.map